// OOPM programs
#include <iostream>
using namespace std;

class It{
    private:
        int a, b;   //data member
    
    public:
        void setValue() {   //member function-1
            cout << "Enter the values of A and B: ";
            cin >> a >> b;
        }
        void getValue() {   //member function-2
            cout << "A = " << a << endl;
            cout << "B = " << b << endl;
        }
};

class Addition{
    private:
        int a,b;

    public:
        void setValue() {
            cout << "Enter the values of A and B: ";
            cin >> a >> b;
        }
        void getValue() {
            cout << "Entered values are: " << endl;
            cout << "A = " << a << endl;
            cout << "B = " << b << endl;
        }
        void addValue() {
            cout << "Addition of A and B = " << a+b << endl;
        }
};

int globalVar = 100;    //global varialble

class ScopeRes{
    public:
        void localFun() {
            cout << "Inside the Local Function." << endl;
        }
        void globalFun();
        
};

void ScopeRes::globalFun() {
    cout << "Inside the Global Function." << endl;
}

class Car{
    public:
        Car() {
            cout << "Inside constructor." << endl;
        }
        ~Car() {
            cout << "Inside destructor." << endl;
        }
};

class A{
    int a;
    float b;
    public:
    A() {
        cout << "Enter the value of A: ";
        cin >> a;
        cout << "Enter the float value of B: ";
        cin >> b;
        cout << "Default constructor values: " << endl;
        cout << "A = " << a << endl << "B = " << b << endl;
    }
    A(int x, int y) {
        a = x;
        b = y;
        cout << "Parameterized constructor values: " << endl;
        cout << "A = " << a << endl << "B = " << b << endl;
    }
};

class Father{
    protected:
        int a, b;
    public:
        void setValue() {
            cout << "Enter the values of A and B: ";
            cin >> a >> b;
        }
        // void getValue() {
        //     cout << "parent class values are: " << endl;
        //     cout << "A = " << a << endl;
        //     cout << "B = " << b << endl;
        // }
};

class Son : public Father {
    private:
        float x, y;
    public:
        void setValue2() {
            cout << "Enter the float values of X and Y: ";
            cin >> x >> y;
        }
        void getValue2() {
            cout << "Entered values are: " << endl;
            cout << "X = " << x << endl;
            cout << "Y = " << y << endl;
            
            cout << "Derived values of parent class are: " << endl;
            cout << "A = " << a << endl;
            cout << "B = " << b << endl;
            
        }
};

int main() {
    // programs listing:
    cout << "Enter 1 to demontrate class and objects." << endl;
    cout << "Enter 2 to add two numbers using member functions of a class." << endl;
    cout << "Enter 3 to demonstrate the use of scope resolution operator." << endl;
    cout << "Enter 4 to display the concept of constructor & destructor." << endl;
    cout << "Enter 5 for Constructor overloading." << endl;
    cout << "Enter 6 to demonstrate the single inheritance." << endl;
    
    cout << endl;
    int prog;
    cout << "Enter the program number: ";
    cin >> prog;
    switch(prog) {
        case 1:
            It obj;
            obj.setValue();
            obj.getValue();
            break;
            
        case 2:
            Addition obj2;
            obj2.setValue();
            obj2.getValue();
            obj2.addValue();
            break;
            
        case 3:
            ScopeRes obj3;
            int localVar;
            localVar = 10;
            cout << "Local Variable = " << localVar << endl;
            cout << "Global Variable = " << ::globalVar << endl;
            obj3.localFun();
            obj3.globalFun();
            break;
            
        case 4:
            Car obj4;
            break;
    }
    if(prog == 5) {
        A obj5; 
        A obj6(50,100);
        cout << "Constructor overloaded." << endl;
        // or simply,
        // A obj5, obj6(5,10);
    } else if(prog == 6) {
        Father obj;  // no need 
        Son obj2;
        
        cout << "Inside Parent Class" << endl;
        // obj.setValue();  it will give garbage value in derived class...
        obj2.setValue();    //calling father class function with child class object...
        cout << "Inside Child Class" << endl;
        obj2.setValue2();
        obj2.getValue2();
    }
    return 0;
}